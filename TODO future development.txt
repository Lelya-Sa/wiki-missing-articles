- implement PAGERANK algorithm.
- the tool should be translated to Wikipedia's supported language ( multilingual tool)
- runtime optimization (ex. make use of available cache storage in the Media Wiki cloud).
- survey for Wikimedia editor on which metrics are more important !!!!. 
- write requirements.txt file
- for static file consider using Djangoâ€™s collectstatic command during deployment and, if possible, configuring a CDN or another method for static content.
- make sure the languages.json is updated once in a while.



should add in read me :
- the api usage (names and ref).
- the translation method.
- python manage.py makemessages -l {lang_code}


Deployment Artifacts:
Pre-Compilation of Translations:
Ensure that you run django-admin makemessages and django-admin compilemessages during your build process. For cloud deployments, it's common practice to include these steps as part of your CI/CD pipeline. This way, the compiled .mo files are available in your deployment package.

Static Files Management:
Make sure your static files and translations are correctly collected (using python manage.py collectstatic) and served in your cloud environment. Proper setup of LOCALE_PATHS and file permissions is important.